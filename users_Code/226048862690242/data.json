{"title":"main","code":"import sys\nimport json\nimport random\noprators_Files = [\"one_Chars_Operators.txt\", \"two_Chars_Operators.txt\", \"word_Operators.txt\"]\nall_Items = [] # [command [arguments --- > [ if [operator [this items], operator2 [this items]]]]\nvalues_Of_Variables = []\nerrors = []\nhappend = []\nall_Things = []\n\ndef split_To_Words(text):\n    list = []\n    e_List = text.split(\"\\n\")\n    for i in range(0, len(e_List)):\n        list.append(e_List[i].split(\" \"))\n    return list\ndef open_In_List(file_Name):\n    with open (file_Name, \"r\", encoding = \"utf-8\") as file:\n        list = file.read().split(\"\\n\")\n    return list\ndef control_Operators(x):\n    global oprators_Files, errors, all_Things\n    operators = open(oprators_Files[0], \"r\", encoding=\"utf-8\").read().split(\"\\n\")\n    parts = []\n    operators = [\"*\", \"/\", \"%\", \"+\", \"-\"]\n    primary_Operators = [\"*\", \"/\", \"%\"]\n    secondary_Operators = [\"+\", \"-\"]\n    this_ListX = list(x)\n    include = []\n    parts = []\n    #print(x)\n    open_String = False\n    part = \"\"\n    for k in this_ListX:\n        #print(k)\n        control = False\n        for i in operators:\n            if k == \"'\" or k == '\"' and not open_String:\n                open_String = True\n            elif k == \"'\" or k == '\"' and open_String:\n                open_String = False\n            if k == i and not open_String:\n                include.append(i)\n                parts.append(part)\n                parts.append(i)\n                part = \"\"\n                control = True\n        if not control:\n            part+=k\n    else:\n        #print(part)\n        if part != x:\n            parts.append(part)\n    if open_String:\n        errors.append(\"Nincs lezárva az idézőjel\")\n    results = None\n    #print(parts)\n    for i in range(0, len(parts)):\n        if i%2==1:\n            #print(parts[i])\n            if parts[i] == \"*\":\n                if results == None:\n                    try:\n                        results = (value_Of_Variable(parts[i-1])*value_Of_Variable(parts[i+1]))\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n                elif results:\n                    try:\n                        #print(value_Of_Variable(parts[i+1]))\n                        results*=value_Of_Variable(parts[i+1])\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n            elif parts[i] == \"/\":\n                if results == None:\n                    try:\n                        results = (value_Of_Variable(parts[i-1])/value_Of_Variable(parts[i+1]))\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n                elif results:\n                    try:\n                        results /=value_Of_Variable(parts[i+1])\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n            elif parts[i] == \"%\":\n                if results == None:\n                    try:\n                        results = (value_Of_Variable(parts[i-1])%value_Of_Variable(parts[i+1]))\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n                elif results:\n                    try:\n                        results %=value_Of_Variable(parts[i+1])\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n    for i in range(0, len(parts)):\n        if i%2==1:\n            #print(parts[i])\n            if parts[i] == \"+\":\n                if results == None:\n                    try:\n                        results = (value_Of_Variable(parts[i-1])+value_Of_Variable(parts[i+1]))\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n                elif results:\n                    try:\n                        control = True\n                        #print(value_Of_Variable(parts[i+1]))\n                        try:\n                            a = int(results)\n                        except:\n                            control = False\n                        if not control:\n                            results+=str(value_Of_Variable(parts[i+1]))\n                        else:\n                            results+=value_Of_Variable(parts[i+1])\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n            elif parts[i] == \"-\":\n                if results == None:\n                    try:\n                        results = (value_Of_Variable(parts[i-1])-value_Of_Variable(parts[i+1]))\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n                elif results:\n                    try:\n                        results -=value_Of_Variable(parts[i+1])\n                    except:\n                        errors.append(\"Nincs a művelet befejezve\")\n    if results == None:\n        results = value_Of_Variable(x)\n    return results\n\n\ndef add_To_All_List(data, index_List):\n    global values_Of_Variables, oprators_Files, errors, happend\n    operators = [\"+\", \"-\", \"*\", \"/\", \"%\"]\n    for i in range(0, len(data)):\n        if len(data[i].split(\"(\")) > 1:\n            out = \"\"\n            this_ListX = list(data[i])\n            end = \"\"\n            open_this_ListIndex = 0\n            open_List = []\n            for k in this_ListX:\n                if k == \")\":\n                    text = \"\"\n                    index = len(open_List)-1\n                    last = [True, -1]\n                    if not open_List[len(open_List)-1][0]:\n                        j = len(open_List)-1\n                        added = False\n                        while j >= 0:\n                            if open_List[j][0]:\n                                if not added:\n                                    open_List[j][0] = False\n                                    text = open_List[j][1]\n                                    index = j\n                                    added = True\n                                else:\n                                    last = [False, j]\n                                    break\n                            elif not open_List[j][0]:\n                                pass\n                            j-=1\n                    else:\n                        open_List[len(open_List)-1][0]=False\n                        j = len(open_List)-1\n                        while j >= 0:\n                            if open_List[j][0]:\n                                last = [False, j]\n                                break\n                            j-=1\n                        text = open_List[len(open_List)-1][1]\n                    #all_Things.append([values_Of_Variables[index_List[i][0]],[]])\n                    open_List[index][2] = control_Operators(text)\n                    if not last[0]:\n                        if type(open_List[index][2]) == \"\":\n                            open_List[last[1]][2] += f'\"{open_List[index][2]}\"'\n                        else:\n                            open_List[last[1]][1] += f\"{open_List[index][2]}\"\n                        del open_List[index]\n                add = False\n                index = len(open_List)-1\n                while index >= 0:\n                    if open_List[index][0]:\n                        if k != \"(\" and k != \")\":\n                            open_List[index][1] += k\n                            add = True\n                            break\n                    index -= 1\n                else: \n                    if not add:\n                        pass\n                if k == \"(\":\n                    index = len(open_List)-1\n                    open_List.append([True, \"\", \"\"])\n                to_Out = True\n                for f in open_List:\n                    if f[0]:\n                        to_Out = False\n                else:\n                    if to_Out and k != \")\" and k != \"(\":\n                        for a in range(open_this_ListIndex, len(open_List)):\n                            out += f\"{open_List[a][2]}\"\n                        open_this_ListIndex = len(open_List)\n                        out += k\n            for a in range(open_this_ListIndex, len(open_List)):\n                out += f\"{open_List[a][2]}\"\n            value = control_Operators(out)\n            happend.append([values_Of_Variables[index_List[i]][0], value])\n            values_Of_Variables[index_List[i]][1] = value\n        else:\n            value = control_Operators(data[i])\n            values_Of_Variables[index_List[i]][1] = value\n            happend.append([values_Of_Variables[index_List[i]][0], value])\n        #values_Of_Variables[index_List[i]][1] = data[i]\n\ndef control_String(i, string):\n    if i == \"'\" or i == '\"':\n        return not string\n    else:\n        return string\n\n\ndef ctrl_List(var):\n    string = False\n    open = False\n    e = \"\"\n    was = -2\n    for i in var:\n        string = control_String(i, string)\n        if open and i != \"]\" or string:\n            e += i\n        if not string and i == \"[\" and not open:\n            was = 0\n            open = True\n        elif not string and i == \"[\" and open:\n            was += 1\n        elif not string and i == \"]\" and open:\n            was -= 1\n            if was < 0: open = False\n            else:\n                e += i\n    if was == -1:\n        e = add_Type(e)\n    return [was, e] \n\ndef add_Type(str):\n    string = False\n    list = []\n    e = \"\"\n    open_List = 0\n    for i in str:\n        string = control_String(i, string)\n        if not string and i == \",\" and open_List == 0:\n            a = ctrl_List(e)\n            if a[0] == -1:\n                list.append(a[1])\n            else:\n                list.append(value_Of_Variable(e))\n            e = \"\"\n        else:\n            if i == \"[\":\n                open_List+=1\n            elif i == \"]\":\n                open_List-=1\n            e += i\n    else:\n        a = ctrl_List(e)\n        if a[0] == -1:\n            list.append(a[1])\n        else:\n            list.append(value_Of_Variable(e))\n    return list\n\n\ndef value_Of_Variable(value):\n    global values_Of_Variables\n    returned_Value = None\n    if len(value.split(\"'\")) > 1 or len(value.split('\"')) > 1:\n        listed_Value = list(value)\n        returned_Value = \"\"\n        for i in range(1, len(listed_Value)-1):\n            returned_Value+=listed_Value[i]\n    elif value == \"True\":\n        returned_Value = True\n    elif value == \"False\":\n        returned_Value = False\n    try:\n        returned_Value = int(value)\n    except:\n        try:\n            returned_Value = float(value)\n        except:\n            if returned_Value == None:\n                for i in range(0, len(values_Of_Variables)):\n                    if values_Of_Variables[i][0] == value:\n                        returned_Value = values_Of_Variables[i][1]\n    return returned_Value\n\ndef declarate(this_List):\n    global values_Of_Variables\n    name = []\n    value = []\n    all = \"\"\n    open_This = False\n    list_Type = False\n    #this_List = open(file_Name, 'r',encoding = \"utf-8\").read()\n    operators = open(oprators_Files[0], \"r\", encoding=\"utf-8\").read().split(\"\\n\")\n    for i in range(0, len(this_List)):\n        if not open_This:\n            all += f\"{this_List[i]}\"\n        else:\n            all+= f\" {this_List[i]}\"\n        if len(this_List[i].split('\"'))%2==0 or len(this_List[i].split('\"'))%2==0:\n            open_This = not open_This\n    #print(all)\n    was = False\n    string = False\n    e = \"\"\n    for i in all:\n        if i == \"'\" or i == '\"':\n            string = not string\n        if i == \"=\" and not string and not was:\n            was = True\n        #if i == \",\" and not string and was:\n        #    value.append(e)\n        #    e = \"\"\n        elif was:\n            if i != \"=\":\n                e += i\n            elif string:\n                e += i\n    else:\n        if e:\n            value.append(e)\n    a = ctrl_List(value[0])\n    if a[0] == -2:\n        v = value[0]\n        value2 = []\n        string = False\n        e = \"\"\n        for i in v:\n            string = control_String(i, string)\n            if not string and i == \",\":\n                value2.append(e)\n                e = \"\"\n            else:\n                e += i\n        else:\n            if e:\n                value2.append(e)\n        if len(value2):\n            value = value2\n    else:\n        value = [a[1]]\n        list_Type = True\n    index = 0\n    string = False\n    add = \"\"\n    v_Name = True\n    was = False\n    for i in all:\n        if i == \"'\" or i == '\"':\n            string = not string\n            add += i\n        if add and not string and i == \",\" or i == \"=\":\n            control = True\n            for j in operators:\n                stri = False\n                for k in add:\n                    if k == \"'\" or k == '\"':\n                        stri = not stri\n                    if j == k and not stri:\n                        control = False\n                        name.append(add.split(j)[0])\n                        value[index]= f\"{add.split(j)[0]}{j}{value[index]}\"\n            else:\n                if control:\n                    name.append(add)\n                    add = \"\"\n            index += 1\n        else:\n            add += i\n    index_List = []\n    index1 = 0\n    if list_Type:\n        values_Of_Variables.append([name[0], value])\n    else:\n        for i in name:\n            control = False\n            for k in range(0, len(values_Of_Variables)):\n                if i == values_Of_Variables[k][0]:\n                    control = True\n                    #values_Of_Variables[k][1] = None\n                    index_List.append(k)\n            if not control:\n                values_Of_Variables.append([i, None])\n                index_List.append((len(values_Of_Variables)-1)+index1)\n        add_To_All_List(value, index_List)\n\ndef random_Name(length):\n    name = str(random.randint(1*length, 9*length))\n    return name\n\ndef main(name):\n    global all_Items\n    sintax_Error = []\n    file_Data = open(name, \"r\", encoding = \"utf-8\").read()\n    list = split_To_Words(file_Data)\n    last_Item = False\n    end = True\n    comment = False\n    for i in range(0, len(list)):\n        if len(list[i]) > 4:\n            for j in (0, 3):\n                if list[i][j] != \"\":\n                    end = False\n            else:\n                if end and last_Item:\n                    all_Items[len(all_Items)-1].append(list[i])\n                else:\n                    last_Item = False\n        else:\n            last_Item = False\n        was = False\n        rewas = False\n        new_List = []\n        comment = False\n        for j in list[i]:\n            if j == \"=\" and not was or len(j.split(\"=\")) == 2 and rewas == False:\n                was = True\n            elif j == \"=\" and was:\n                was = False\n                rewas = True\n            new_J = \"\"\n            if len(j.split(\"#\")) >= 1:\n                for k in j:\n                    if k != \"#\" and not comment:\n                        new_J+=k\n                    else:\n                        comment = True\n                else:\n                    j = new_J\n            if j and not comment:\n                new_List.append(j)\n        else:\n            if was:\n                if len(new_List) > 1:\n                    declarate(new_List)\n    json1 = {\"all\" : happend, \"end\" : values_Of_Variables, \"file_Name\" : name.split(\"\\\\\")[len(name.split(\"\\\\\"))-1]}\n    json1 = json.dumps(json1)\n    string_Json = f'{json1}'\n    this_File = f\"users_Json\\\\{random_Name(1000)}.json\"\n    open(this_File, \"w\", encoding = \"utf-8\").write(string_Json)\n    return this_File\nvar = main(sys.argv[1])\nprint(var)"}